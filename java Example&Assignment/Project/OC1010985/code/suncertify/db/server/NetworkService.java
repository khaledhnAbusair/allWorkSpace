package suncertify.db.server;

import suncertify.db.Engine;
import suncertify.db.EngineService;

/**
 * Defines the interface for a database engine network service.
 * 
 * <p>
 * It is an implementation specific to suspend any client pending operations
 * when shutdown command is issued to a network service or to wait until they
 * finish.
 * 
 * {@link AbstractNetworkService} provide a base implementation for this
 * interface. <br>
 * Registering through
 * {@link #addNetworkServiceEventListener(suncertify.db.server.NetworkServiceEventListener) }
 * allows reception for stop and start notifications generated by this network
 * service.<br>
 * 
 * An implementation for this interface can be obtained by {@link EngineService}
 * interface.
 * 
 * @author Mohammad S. Abdellatif
 * @see NetworkServiceEventListener
 * @see AbstractNetworkService
 * @see EngineService
 */
public interface NetworkService {

	/**
	 * Start the database network service and start accepting new clients.
	 * 
	 * @throws NetworkServiceException
	 *             when starting for server is failed.
	 */
	public void start() throws NetworkServiceException;

	/**
	 * Shutdown database server and stop accepting new clients.
	 * 
	 * <p>
	 * It is an implementation specific to wait until server clients finished
	 * pending operations or not.
	 * 
	 * @throws NetworkServiceException
	 *             if shutdown is failed.
	 */
	public void stop() throws NetworkServiceException;

	/**
	 * Returns <code>true</code> if network service is running, otherwise
	 * <code>false</code>.
	 * 
	 * @return returns <code>true</code> if network service is running,
	 *         otherwise <code>false</code>.
	 */
	public boolean isRunning();

	/**
	 * Returns database engine which this network service is serving.
	 * 
	 * <p>
	 * It may not returns the same engine instance each time called depending on
	 * the running status for this service between calls. Best time to call this
	 * method after a successful call to {@link #start()}.
	 * 
	 * @return services database engine instance.
	 */
	public Engine getEngine();

	/**
	 * Adds listener to this network service to be notified for network service
	 * events.
	 * 
	 * @param listener
	 *            listener to be added.
	 */
	public void addNetworkServiceEventListener(
			NetworkServiceEventListener listener);

	/**
	 * Removes listener from this network service so it wont be notified for
	 * network service events.
	 * 
	 * @param listener
	 *            listener to remove.
	 */
	public void removeNetworkServiceEventListener(
			NetworkServiceEventListener listener);
}
