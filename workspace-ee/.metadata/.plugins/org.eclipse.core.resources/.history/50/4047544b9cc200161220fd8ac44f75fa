package com.progressoft.jip.downloader.web;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;

public class DownloaderServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private Path pathToServe;

	@Override
	public void init() throws ServletException {
		ServletContext servletContext = getServletContext();
		String path = servletContext.getInitParameter("downloader.pathToServe");
		if (Objects.isNull(path)) {
			throw new ServletException("downloader.pathToserve context parameter is missing");
		}
		pathToServe = Paths.get(path);
		if (Files.notExists(pathToServe) || !Files.isDirectory(pathToServe)) {
			throw new ServletException("Path " + path + "doesn`t exist or not a directorey");
		}

	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String parameter = req.getParameter("uploaded");
		System.err.println("As Parameter : " + parameter);
		Part part = req.getPart("uploaded");
		String fileName = part.getSubmittedFileName();
		String contentType = part.getContentType();
		System.err.println("File tp upload : " + fileName + ", Type : " + contentType);
		System.err.println("Paaaart :" + part);
		Path fileUploaded = pathToServe.resolve(fileName);
		System.err.println("FileUploaded Format : " + fileUploaded.toString());
		Files.copy(part.getInputStream(), fileUploaded);

		String contextPath = getServletContext().getContextPath();
		System.err.println("Redirect Context Path   : " + contextPath);

		resp.sendRedirect(contextPath + " /downloader");
	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

		String servletPath = req.getServletPath();
		String pathInfo = req.getPathInfo();
		String requestURI = req.getRequestURI();
		System.out.println("Servlet Path : " + servletPath + "||" + "Path Info : " + pathInfo + "||" + "Request URI  :"
				+ requestURI);

		String fileToDownload = pathInfo == null || pathInfo.equals("/") ? null : pathInfo;
		if (fileToDownload == null) {
			viewAllFiles(req, resp);
		} else {
			downloadFile(resp, fileToDownload.substring(1));

		}
	}

	private void downloadFile(HttpServletResponse resp, String fileToDownload) throws IOException {
		Path pathToDownload = pathToServe.resolve(fileToDownload);
		ServletOutputStream outputStream;
		String mimeType;
		if (!Files.exists(pathToDownload)) {
			resp.sendError(HttpServletResponse.SC_NOT_FOUND);
			return;
		}
		mimeType = getServletContext().getMimeType(fileToDownload).toString();

		resp.setContentType(mimeType);
		resp.setContentLengthLong(Files.size(pathToDownload));
		resp.setHeader("Content-Disposition", "attachment; filename=" + pathToDownload.getFileName().toString());
		outputStream = resp.getOutputStream();
		Files.copy(pathToDownload, outputStream);
	}

	private void viewAllFiles(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
		try (Stream<Path> list = Files.list(pathToServe)) {
			List<Path> paths = list.collect(Collectors.toList());
			req.setAttribute("paths", paths);
		}
		req.getRequestDispatcher("/files-list.jsp").forward(req, resp);
	}
}
